
==================== FINAL INTERFACE ====================
2016-08-04 12:24:23.782717 UTC

interface homew_LO6qWsaeHkN7OobKQrAiUD:LogAnalysis 7103
  interface hash: 993e01f4e938d53f337bedb9e8c0a57d
  ABI hash: 21db748aef394efe845aba6f63455069
  export-list hash: 4273d95a6bf051b2216039dc3c62801c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c0a7b65a6dddbc4161c2e2bfabe3dc3
  sig of: Nothing
  used TH splices: False
  where
exports:
  LogAnalysis.isNumeric
  LogAnalysis.parseMessage
module dependencies: Log
package dependencies: base-4.8.2.0* ghc-prim-0.4.0.0
                      integer-gmp-1.0.0.0
orphans: base-4.8.2.0:GHC.Base base-4.8.2.0:GHC.Float
family instance modules: base-4.8.2.0:Control.Applicative
                         base-4.8.2.0:Data.Either base-4.8.2.0:Data.Monoid
                         base-4.8.2.0:Data.Type.Equality base-4.8.2.0:GHC.Generics
import  -/  base-4.8.2.0:Data.Maybe 1cb58de2b04ee3c0c0a7dc9201184aff
import  -/  base-4.8.2.0:Data.OldList d8fd80b0e14aa085ce6219cd89dad356
import  -/  base-4.8.2.0:GHC.Base 1db77db5dae73d8c424c85b09fbadb89
import  -/  base-4.8.2.0:Prelude 694dcaf039efe62df1c44834e2dbd2fb
import  -/  base-4.8.2.0:Text.Read ef0ef92fb7358ae94bab089940adfd2a
import  -/  ghc-prim-0.4.0.0:GHC.Classes e1f4ff80f7b5262008a595d29986fb18
import  -/  Log 379888f20ad5625f76d7eb06c07b6134
  exports: 8a7687cafa54d0a33de325b156762209
  Error 45f44f46ecc789e7fe05b90d624a3733
  Info 7ae639983ec0002dcef8040279738bb8
  LogMessage 9af0abfe1c276d7dd027b481494ab612
  LogMessage ad916cd961575d54eb0c3069981f5d79
  Unknown 6d0bad67ff3d477dd449109ffe853218
  Warning 98ee3af009b0625fc62d150a61596869
7d9340f8ac447763dfda8855325fcb48
  isNumeric :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ s :: GHC.Base.String ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           LogAnalysis.isNumeric1
                           s) of wild {
                   [] -> GHC.Types.False
                   : x ds
                   -> case ds of wild1 {
                        [] -> GHC.Types.True : ipv ipv1 -> GHC.Types.False } }) -}
d8e7687db517a17f86536d8c3311f17f
  isNumeric1 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.NTCo:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
221a7d4a57e7bb71794e48270fa8d322
  parseMessage :: GHC.Base.String -> Log.LogMessage
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ str :: GHC.Base.String ->
                 case Data.OldList.words str of wild {
                   [] -> Log.Unknown str
                   : ds ds1
                   -> case ds of wild1 {
                        [] -> Log.Unknown str
                        : ds2 ds3
                        -> case ds2 of wild2 { GHC.Types.C# ds4 ->
                           case ds4 of ds5 {
                             DEFAULT -> Log.Unknown str
                             'E'
                             -> case ds3 of wild3 {
                                  []
                                  -> case ds1 of wild4 {
                                       [] -> Log.Unknown str
                                       : ec ds6
                                       -> case ds6 of wild5 {
                                            [] -> Log.Unknown str
                                            : ts msg
                                            -> case Text.Read.readEither6
                                                      @ GHC.Types.Int
                                                      (Text.ParserCombinators.ReadP.run
                                                         @ GHC.Types.Int
                                                         LogAnalysis.isNumeric1
                                                         ec) of wild6 {
                                                 [] -> Log.Unknown str
                                                 : x ds7
                                                 -> case ds7 of wild7 {
                                                      []
                                                      -> case Text.Read.readEither6
                                                                @ GHC.Types.Int
                                                                (Text.ParserCombinators.ReadP.run
                                                                   @ GHC.Types.Int
                                                                   LogAnalysis.isNumeric1
                                                                   ts) of wild8 {
                                                           [] -> Log.Unknown str
                                                           : x1 ds8
                                                           -> case ds8 of wild9 {
                                                                []
                                                                -> Log.LogMessage
                                                                     (Log.Error x)
                                                                     x1
                                                                     (Data.OldList.unwords msg)
                                                                : ipv ipv1 -> Log.Unknown str } }
                                                      : ipv ipv1 -> Log.Unknown str } } } }
                                  : ipv ipv1 -> Log.Unknown str }
                             'I'
                             -> case ds3 of wild3 {
                                  []
                                  -> case ds1 of wild4 {
                                       [] -> Log.Unknown str
                                       : ts msg
                                       -> case Text.Read.readEither6
                                                 @ GHC.Types.Int
                                                 (Text.ParserCombinators.ReadP.run
                                                    @ GHC.Types.Int
                                                    LogAnalysis.isNumeric1
                                                    ts) of wild5 {
                                            [] -> Log.Unknown str
                                            : x ds6
                                            -> case ds6 of wild6 {
                                                 []
                                                 -> Log.LogMessage
                                                      Log.Info
                                                      x
                                                      (Data.OldList.unwords msg)
                                                 : ipv ipv1 -> Log.Unknown str } } }
                                  : ipv ipv1 -> Log.Unknown str }
                             'W'
                             -> case ds3 of wild3 {
                                  []
                                  -> case ds1 of wild4 {
                                       [] -> Log.Unknown str
                                       : ts msg
                                       -> case Text.Read.readEither6
                                                 @ GHC.Types.Int
                                                 (Text.ParserCombinators.ReadP.run
                                                    @ GHC.Types.Int
                                                    LogAnalysis.isNumeric1
                                                    ts) of wild5 {
                                            [] -> Log.Unknown str
                                            : x ds6
                                            -> case ds6 of wild6 {
                                                 []
                                                 -> Log.LogMessage
                                                      Log.Warning
                                                      x
                                                      (Data.OldList.unwords msg)
                                                 : ipv ipv1 -> Log.Unknown str } } }
                                  : ipv ipv1 -> Log.Unknown str } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

